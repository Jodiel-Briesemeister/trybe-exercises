// use ("agg_example");

// db.transactions.insertMany([
//   { value: 5900, from: "Dave America", to: "Ned Flanders", bank: 'International' },
//   { value: 1000, from: "Mark Zuck", to: "Edna Krabappel", bank: 'FloridaBank' },
//   { value: 209, from: "Lisa Simpson", to: "Dave America", bank: 'bankOfAmerica' },
//   { value: 10800, from: "Arnold Schuz", to: "Mark Zuck", bank: 'JPMorgan' },
//   { value: 850, from: "Barney Gumble", to: "Lisa Simpson", bank: 'Citigroup' },
//   { value: 76000, from: "Ned Flanders", to: "Edna Krabappel", bank: 'JPMorgan' },
//   { value: 1280, from: "Dave America", to: "Homer Simpson", bank: 'Citigroup' },
//   { value: 7000, from: "Arnold Schuz", to: "Ned Flanders", bank: 'International' },
//   { value: 59020, from: "Homer Simpson", to: "Lisa Simpson", bank: 'International' },
//   { value: 100, from: "Mark Zuck", to: "Barney Gumble", bank: 'FloridaBank' },
// ]);


// 1-Selecione todas as transações feitas 
// pelo cliente chamado "Dave America".
// db.transactions.aggregate(
//   [{ $match : { from : "Dave America" } }]
// );

// 2-Selecione todas as transações com o 
// valor entre 700 e 6000, ou que sejam 
// recebidas pela cliente "Lisa Simpson".
// db.transactions.aggregate(
//   [ { $match: { 
//        $or: [
//          { to : "Lisa Simpson" },
//          { value: { $gte: 700, $lte: 6000 } }
//        ] 
//      } 
//     } 
//   ]
// );

// 3-Selecione três transações 
// com o valor acima de 1000.
// db.transactions.aggregate(
//   [ 
//     { $match: { value: { $gt: 1000 } } },
//     { $limit: 3 }
//   ]
// );



// 1-Selecione todos os bancos, ou seja, valores do campo bank;
// db.transactions.aggregate(
//   [
//     { 
//       $group: {
//         _id: "$bank",
//       }
//     }
//   ]
// );

// 2-Selecione o valor total das transações em cada banco e quantas são;
// db.transactions.aggregate(
//   [
//     { 
//       $group: {
//         _id: "$bank",
//         transações: { $sum: 1 },
//         total: { $sum: "$value" },
//       }
//     }
//   ]
// );

// 3-Selecione o valor total de transações;
// db.transactions.aggregate(
//   [
//     { 
//       $group: {
//         _id: null,
//         total: { $sum: "$value" },
//       }
//     }
//   ]
// );

// 4-Selecione os bancos que têm o valor total de 
// transações maior que 1000.
// db.transactions.aggregate(
//   [
//     { 
//       $group: {
//         _id: "$bank",
//         total: { $sum: "$value" },
//       }
//     },
//     {
//       $match: { total: { $gt: 1000 } }
//     }
//   ]
// );

// db.clients.insertMany([
//   { name: "Dave America", State: "Florida" },
//   { name: "Ned Flanders", State: "Alasca" },
//   { name: "Mark Zuck", State: "Texas" },
//   { name: "Edna Krabappel", State: "Montana" },
//   { name: "Arnold Schuz", State: "California" },
//   { name: "Lisa Simpson", State: "Florida" },
//   { name: "Barney Gumble", State: "Texas" },
//   { name: "Homer Simpson", State: "Florida" },
// ]);

// 1-Selecione todos os clientes com as suas 
// respectivas transações feitas;
// db.clients.aggregate([
//   {
//     $lookup: {
//       from: "transactions",
//       localField: "name",
//       foreignField: "from",
//       as: "transactions"
//     }
//   },
//   {
//     $project: {
//       _id: 0,
//       "transactions._id": 0,
//       "transactions.from": 0
//     }
//   }
// ]);

// 2-Selecione quatro clientes com as suas respectivas 
// transações recebidas;
// db.clients.aggregate([
//   {
//     $lookup: {
//       from: "transactions",
//       localField: "name",
//       foreignField: "to",
//       as: "transactions"
//     }
//   },
//   {
//     $project: {
//       _id: 0,
//       "transactions._id": 0,
//       "transactions.to": 0
//     }
//   },
//   {
//     $limit: 4,
//   }
// ]);

// 3-Selecione todos os cliente do estado da "Florida"
// e suas respectivas transações recebidas.
// db.clients.aggregate(
//   [
//     {
//       $match: { State: "Florida" },
//     },
//     {
//       $lookup: {
//         from: "transactions",
//         localField: "name",
//         foreignField: "to",
//         as: "transactions"
//       }
//     },
//     {
//       $project: {
//         _id: 0,
//         "transactions._id": 0,
//         "transactions.to": 0,
//       }
//     },
//   ]
// );

use ("erp");

// Exercício 1: Utilizando o estágio $match , escreva uma agregação 
// para retornar somente os clientes do sexo "MASCULINO".
db.clientes.aggregate([
  { $match: { sexo: "MASCULINO" } }
]);

// Exercício 2: Utilizando o estágio $match , escreva uma agregação para
// retornar somente os clientes do sexo "FEMININO" e com data de nascimento
// entre os anos de 1995 e 2005.
db.clientes.aggregate([
  { $match: { 
      $and: [ 
        { sexo: "FEMININO" },
        { dataNascimento: {
          $gte: ISODate('1995-01-01'),
          $lte: ISODate('2005-12-31')
        } }
      ]
    }
  }
]);

// Exercício 3: Utilizando o estágio $match , escreva uma agregação
// para retornar somente os clientes do sexo "FEMININO" e com data de
// nascimento entre os anos de 1995 e 2005 , limitando a quantidade de
// documentos retornados em 5.
// db.clientes.aggregate([
//   { $match: { 
//       $and: [ 
//         { sexo: "FEMININO" },
//         { dataNascimento: {
//           $gte: ISODate('1995-01-01'),
//           $lte: ISODate('2005-12-31')
//         } }
//       ]
//     }
//   },
//   { $limit: 5 }
// ]);

// Exercício 4: Conte quantos clientes do estado SC existem na coleção.
// Retorne um documento em que o campo _id contenha a UF e outro campo com o total.
// db.clientes.aggregate([
//   { $match: { "endereco.uf": "SC" } },
//   { $group: {
//       _id: "$endereco.uf",
//       total_clientes: { $sum: 1 },
//     } 
//   }
// ]);

// Exercício 5: Agrupe os clientes por sexo. Retorne o total de clientes
// de cada sexo no campo total.
db.clientes.aggregate([
  { $group: {
      _id: "$sexo",
      total_clientes: { $sum: 1 },
    } 
  }
]);

// Exercício 6: Agrupe os clientes por sexo e uf. Retorne o total 
// de clientes de cada sexo no campo total.
db.clientes.aggregate([
  { $group: {
      _id: { 
        sexo: "$sexo", 
        uf: "$endereco.uf"
      },
      total_clientes: { $sum: 1 },
    } 
  }
]);

// Exercício 7 : Utilizando a mesma agregação do exercício anterior,
// adicione um estágio de projeção para modificar os documentos de saída,
// de forma que se pareçam com o documento a seguir
// (não se importe com a ordem dos campos):
// {
//   "estado": "SP",
//   "sexo": "MASCULINO",
//   "total": 100
// }
// db.clientes.aggregate([
//   { $group: {
//       _id: { 
//         sexo: "$sexo", 
//         uf: "$endereco.uf"
//       },
//       total: { $sum: 1 },
//     } 
//   },
//   { $project: {
//       _id: 0,
//       "estado": "$_id.uf",
//       "sexo": "$_id.sexo",
//       total: 1,
//     } 
//   }
// ]);


// Exercício 8 : Descubra quais são os 5 clientes que gastaram o maior valor.
// db.vendas.aggregate([
//   { $match: { status: "EM SEPARACAO" } },
//   { $group: {
//       _id: "$clienteId",
//       valorTotal: { $sum: "$valorTotal" }
//     } 
//   },
//   { $sort: { 
//       valorTotal: -1 
//     }
//   },
//   { $limit: 5 },
// ]);

// Exercício 9 : Descubra quais são os 10 clientes que gastaram o
// maior valor no ano de 2019.
db.vendas.aggregate([
  { $match: { 
      $and: [
        { status: "EM SEPARACAO" },
        { dataVenda: { 
            $gte: ISODate('2019-01-01'),
            $lte: ISODate('2019-12-31')
        } }
      ]
    } 
  },
  { $group: {
      _id: "$clienteId",
      valorTotal: { $sum: "$valorTotal" }
    } 
  },
  { $sort: { 
      valorTotal: -1 
    }
  },
  { $limit: 10 },
]);

// Exercício 10 : Descubra quantos clientes compraram mais de
// 5 vezes. Retorne um documento que contenha somente o campo
// clientes com o total de clientes.
// Dica: O operador $count pode simplificar sua query.
db.vendas.aggregate([
  { $group: {
      _id: "$clienteId",
      compras: { $sum: 1 },
    }
  },
  { $match: { compras: { $gt: 5 } } },
  {
    $group: {
      _id: null,
      total_clientes: { $sum: 1 }
    }
  },
  { $project: {
      _id: 0 
    }
  }
]);

// OU USANDO $count

db.vendas.aggregate([
  { $group: {
      _id: "$clienteId",
      totalCompras: { $sum: 1 }
    }
  },
  { $match: { totalCompras: { $gt: 5 } } },
  { $count: 'clientes' },
]);



// Exercício 11 : Descubra quantos clientes compraram menos de três
// vezes entre os meses de Janeiro de 2020 e Março de 2020.
db.vendas.aggregate([
  { $match: { 
      dataVenda: {
        $gte: ISODate('2020-01-01'),
        $lte: ISODate('2020-03-31')
      }
    }
  },
  { $group: {
      _id: "$clienteId",
      totalCompras: { $sum: 1 }
    }
  },
  { $match: { totalCompras: { $lt: 3 } } },
  { $count: 'clientes' },
]);

// Exercício 12 : Descubra quais as três uf's que mais compraram no ano de 2020.
// Retorne os documentos no seguinte formato:
// {
//   "totalVendas": 10,
//   "uf": "SP"
// }
db.vendas.aggregate([
  { $match: { 
      dataVenda: {
        $gte: ISODate('2020-01-01'),
        $lte: ISODate('2020-12-31')
      }
    }
  },
  { 
    $lookup: {
      from: "clientes",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "dadosCliente"
    }
  },
  {
    $unwind: "$dadosCliente"
  },
  { $group: {
      _id: "$dadosCliente.endereco.uf",
      totalVendas: { $sum: 1 }
    }
  },
  { 
    $project: {
      uf: "$_id",
      _id: 0,
      totalVendas: 1,
    },
  },
  { 
    $sort: { totalVendas: -1 }
  },
  { $limit: 3 },
])

// Exercício 13 : Encontre qual foi o total de vendas e a média de 
// vendas de cada uf no ano de 2019. Ordene os resultados pelo nome da uf.
// Retorne os documentos no seguinte formato:
// {
//   "_id": "MG",
//   "mediaVendas": 9407.129225352113,
//   "totalVendas": 142
// }
db.vendas.aggregate([
  { $match: { 
      dataVenda: {
        $gte: ISODate('2019-01-01'),
        $lte: ISODate('2019-12-31')
      }
    }
  },
  { 
    $lookup: {
      from: "clientes",
      localField: "clienteId",
      foreignField: "clienteId",
      as: "dadosCliente"
    }
  },
  {
    $unwind: "$dadosCliente"
  },
  { $group: {
      _id: "$dadosCliente.endereco.uf",
      totalVendas: { $sum: 1 },
      mediaVendas: { $avg: "$valorTotal" }
    }
  },
  { 
    $sort: { _id: -1 }
  },
])

